#
# DO NOT EDIT!
#
# Automatically generated by Pitch Developer Studio
# Licensed to Roberto Cedeno, SEE, Project Edition
#
# Copyright (C) 2006-2023 Pitch Technologies AB. All rights reserved.
# Use is subject to license terms.
#

cmake_minimum_required(VERSION 3.1.0)

set(CMAKE_CXX_STANDARD 11)

#Command line options and variables

#Use -DPDS_BUILD_SAMPLE=ON/OFF
option(PDS_BUILD_SAMPLE "Build sample" "ON")

#Use -DPDS_BUILD_STATIC_LIBRARY=ON/OFF
#Build static library instead if shared library.
option(PDS_BUILD_STATIC_LIBRARY "Build static library" "OFF")

#Use -DPDS_BUILD64BIT=ON/OFF
#Force linking of 32/64 bit RTIDriver libraries.
#If not set, PDS_BUILD64BIT will be set dependending on the operating system that Developer Studio os running on.
option(PDS_BUILD64BIT "Use 64 bit RTIDriver libraries" "ON")

#Use -DPDS_USE_PRECOMPILED_HEADERS=ON/OFF
option(PDS_USE_PRECOMPILED_HEADERS "Use precompiled headers" "ON")

#Use -DPDS_ALTERNATE_OUTPUT_NAME=<alternate output name>
#Libraries will be named lib<PDS_ALTERNATE_OUTPUT_NAME>.so/dll/dylib
set(PDS_ALTERNATE_OUTPUT_NAME "SEE_Crater_Transport" CACHE STRING "Alternate output name for generated artifacts")

#Use -DCMAKE_BUILD_TYPE=Debug/Release
#Force a certain build type for non multi build type generators (Make).
#If not set, a release build will be performed
#This option will be ignored on Windows Visual Studio projects

#-------------------------------------------------------------
project(SEE_Crater_Transport)

if(NOT ${PDS_ALTERNATE_OUTPUT_NAME} STREQUAL SEE_Crater_Transport)
   message(STATUS "Developer Studio: Using alternate output name: " ${PDS_ALTERNATE_OUTPUT_NAME})
endif()

#Precompiled headers
if(PDS_USE_PRECOMPILED_HEADERS)
   add_definitions(-DDEVELOPER_STUDIO_USE_PRECOMPILED_HEADERS)
   set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
   include(cotire)
   message(STATUS "Developer Studio: Using precompiled headers")
else()
   message(STATUS "Developer Studio: Disabling precompiled headers, builds may take longer time")
endif()

#Set output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

#Setup where different platforms have 64 bit libraries
set(RTI_DRIVER_LIB "RtiDriver")
set(RTI_DRIVER_DEBUG_LIB "${RTI_DRIVER_LIB}d")
if(PDS_BUILD64BIT)
   message(STATUS "Developer Studio: Using 64 bit libraries")
   if(WIN32)
      set(DEVSTUDIO_LIBDIR "${CMAKE_SOURCE_DIR}/lib/x64")
      set(RTI_DRIVER_LIB "RTIDriver64")
      set(RTI_DRIVER_DEBUG_LIB "${RTI_DRIVER_LIB}d")
   elseif(APPLE)
      set(DEVSTUDIO_LIBDIR "${CMAKE_SOURCE_DIR}/lib")
   else()
      set(DEVSTUDIO_LIBDIR "${CMAKE_SOURCE_DIR}/lib/64")
   endif()
else()
   message(STATUS "Developer Studio: Using 32 bit libraries")
   set(DEVSTUDIO_LIBDIR "${CMAKE_SOURCE_DIR}/lib")
endif()
message(STATUS "Developer Studio: Using RTIDriver libraries from ${DEVSTUDIO_LIBDIR}")

link_directories(${DEVSTUDIO_LIBDIR})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zm1000 /bigobj")

add_subdirectory("${CMAKE_SOURCE_DIR}/cmake/lib")
add_subdirectory("${CMAKE_SOURCE_DIR}/cmake/sample")
add_subdirectory("${CMAKE_SOURCE_DIR}/Federates/CraterTransport")